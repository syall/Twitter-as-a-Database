const { config } = require('dotenv');
const path = require("path");
const fs = require('fs');

const { parsed } = config();
const { PORT, SSL_ENABLED, HOST: host } = parsed;
const port = normalizePort(PORT || 3000);
const ssl = SSL_ENABLED === 'true';

const app = require('../app');
app.set('port', port);

const configPath = path.resolve(__dirname, '../config/host');
const server = ssl
	? require('https').createServer({
		key: fs.readFileSync(`${configPath}.key`),
		cert: fs.readFileSync(`${configPath}.cert`),
	}, app)
	: require('http').createServer(app);

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
process.on('SIGTERM', onHandleSignal);
process.on('SIGINT', onHandleSignal);

function normalizePort(value) {
	const port = parseInt(value, 10);
	if (isNaN(port))
		return value;
	if (port >= 0)
		return port;
	return false;
}

function onError(error) {
	if (error.code !== 'EADDRINUSE')
		throw error;
	console.error(`${port} is already in use`);
	process.exit(1);
}

function onListening() {
	const { name } = require('../package.json');
	console.log(`${name} at http${ssl ? 's' : ''}://${host}:${port}`);
}

function onHandleSignal() {
	console.log('\nHandling Interrupts...');
	server.close(() => {
		console.log('Orderly Shutdown...');
		process.exit(0);
	});
}
